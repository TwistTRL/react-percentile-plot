{"version":3,"sources":["lib/PercentilePlot.js","lib/index.js","index.js"],"names":["COLOR_MAP","PercentilePlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","_this$props","width","height","react_default","a","createElement","style","display","draw","_this$props2","data","minX","maxX","minY","maxY","ctx","current","getContext","clearRect","time","map","rec","p0","p25","p50","p75","p100","x","toDomXCoord_Linear","toDomYCoord_Linear","drawArea","drawLine","y1","y2","fillStyle","beginPath","moveTo","i","j","length","xMiddle","bezierCurveTo","lineTo","closePath","fill","y","stokeStyle","strokeStyle","lineWidth","stroke","PureComponent","DATA","toConsumableArray","Array","keys","0","Math","random","25","50","75","100","App","state","_this2","_this$state","Fragment","type","min","max","value","onChange","ev","setState","Number","parseInt","target","lib","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fe835699.chunk.js","sourcesContent":["import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {toDomXCoord_Linear, toDomYCoord_Linear} from \"plot-utils\";\n\nconst COLOR_MAP = {\n  \"0-100\": \"#ed887f\",\n  \"25-75\": \"#feca8b\",\n  \"50\": \"#8fcc7f\",\n  };\n\nclass PercentilePlot extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}\n              width={width} height={height}\n              style={{width:width,height:height,display:\"block\"}}>\n      </canvas>\n    );\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let {data,width,height,minX,maxX,minY,maxY} = this.props;\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    // Clear plot\n    ctx.clearRect(0,0,width,height);\n    // Draw\n    let time = data.map( (rec)=>rec[\"time\"] );\n    let p0 = data.map( (rec)=>rec[\"0\"] );\n    let p25 = data.map( (rec)=>rec[\"25\"] );\n    let p50 = data.map( (rec)=>rec[\"50\"] );\n    let p75 = data.map( (rec)=>rec[\"75\"] );\n    let p100 = data.map( (rec)=>rec[\"100\"] );\n    // Coord Conv\n    time = time.map( x=>toDomXCoord_Linear(width,minX,maxX,x) );\n    p0 = p0.map( x=>toDomYCoord_Linear(height,minY,maxY,x) );\n    p25 = p25.map( x=>toDomYCoord_Linear(height,minY,maxY,x) );\n    p50 = p50.map( x=>toDomYCoord_Linear(height,minY,maxY,x) );\n    p75 = p75.map( x=>toDomYCoord_Linear(height,minY,maxY,x) );\n    p100 = p100.map( x=>toDomYCoord_Linear(height,minY,maxY,x) );\n    // 0-100\n    this.drawArea(ctx,width,height,time,p0,p100,COLOR_MAP[\"0-100\"]);\n    // 25-75\n    this.drawArea(ctx,width,height,time,p25,p75,COLOR_MAP[\"25-75\"]);\n    // 50\n    this.drawLine(ctx,width,height,time,p50,COLOR_MAP[\"50\"]);\n  }\n\n  drawArea(ctx,width,height,x,y1,y2,fillStyle){\n    ctx.beginPath();\n    ctx.moveTo(x[0],y1[0]);\n    for (let i=0,j=1; j<y1.length; i++,j++) {\n      let xMiddle = (x[j]+x[i])/2;\n      ctx.bezierCurveTo(xMiddle,y1[i], xMiddle,y1[j], x[j],y1[j]);\n    }\n    ctx.lineTo(x[y2.length-1],y2[y2.length-1]);\n    for (let i=y2.length-1, j=y2.length-2; i>=0; i--,j--) {\n      let xMiddle = (x[j]+x[i])/2;\n      ctx.bezierCurveTo(xMiddle,y2[i], xMiddle,y2[j], x[j],y2[j]);\n    }\n    ctx.closePath();\n    ctx.fillStyle = fillStyle;\n    ctx.fill();\n  }\n\n  drawLine(ctx,width,height,x,y,stokeStyle) {\n    ctx.beginPath();\n    ctx.moveTo(x[0],y[0]);\n    for (let i=0,j=1; j<y.length; i++,j++) {\n      let xMiddle = (x[j]+x[i])/2;\n      ctx.bezierCurveTo(xMiddle,y[i], xMiddle,y[j], x[j],y[j]);\n    }\n    ctx.strokeStyle = stokeStyle;\n    ctx.lineWidth = 3;\n    ctx.stroke();\n  }\n}\n\nPercentilePlot.propTypes = {\n  data: PropTypes.array.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n}\n\nexport default PercentilePlot;\n","import PercentilePlot from \"./PercentilePlot\";\n\nexport default PercentilePlot;\n","import React, {Component} from \"react\";\nimport ReactDOM from 'react-dom';\nimport PercentilePlot from \"./lib\";\n\nconst DATA = [...new Array(1000).keys()].map( i=>\n  ({\"time\":i*10,\n    \"0\": 10*Math.random()+10,\n    \"25\": 10*Math.random()+20,\n    \"50\": 10*Math.random()+50,\n    \"75\": 10*Math.random()+80,\n    \"100\":10*Math.random()+90,\n    })\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width: 800,\n                  height: 400,\n                  minX: 0,\n                  maxX: 800,\n                  minY: 0,\n                  maxY: 400,\n                  };\n  }\n  \n  render() {\n    let {height,width,minX,maxX,minY,maxY} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            width\n            <input  type=\"range\" min={800} max={1200} value={width}\n                    onChange={ ev=>this.setState({width:Number.parseInt(ev.target.value)}) }\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={200} max={400} value={height}\n                    onChange={ ev=>this.setState({height:Number.parseInt(ev.target.value)}) }\n                    />\n            {height}\n          </div>\n          <div>\n            minX\n            <input  type=\"range\" min={0} max={maxX} value={minX}\n                    onChange={ ev=>this.setState({minX:Number.parseInt(ev.target.value)}) }\n                    />\n            {minX}\n          </div>\n          <div>\n            maxX\n            <input  type=\"range\" min={minX} max={2000} value={maxX}\n                    onChange={ ev=>this.setState({maxX:Number.parseInt(ev.target.value)}) }\n                    />\n            {maxX}\n          </div>\n          <div>\n            minY\n            <input  type=\"range\" min={0} max={maxY} value={minY}\n                    onChange={ ev=>this.setState({minY:Number.parseInt(ev.target.value)}) }\n                    />\n            {minY}\n          </div>\n          <div>\n            maxY\n            <input  type=\"range\" min={minY} max={200} value={maxY}\n                    onChange={ ev=>this.setState({maxY:Number.parseInt(ev.target.value)}) }\n                    />\n            {maxY}\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <PercentilePlot  data={DATA}\n                                height={height}\n                                width={width}\n                                minX={minX}\n                                maxX={maxX}\n                                minY={minY}\n                                maxY={maxY}\n                                />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}